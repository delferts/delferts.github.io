[
["index.html", "ggplot2 grafiskā sistēma Nodaļa 1 Pamatojums", " ggplot2 grafiskā sistēma Didzis Elferts 2016-12-14 Nodaļa 1 Pamatojums Programmā R ir iespējams veidot attēlus izmantojot dažādas attēlu veidošanas sistēmas, no kurām viena ir ggplot2 (Wickham (2009)) . Šīs sistēmas pamatā ir attēlu veidošanas gramatika. Šī grāmata ir licenzēta atbilstoši Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License nosacījumiem. Literatūra "],
["ievads.html", "Nodaļa 2 Ievads", " Nodaļa 2 Ievads Veidojot attēlus ggplot2 sistēmā, var izmantot divas funkcijas: qplot() vai ggplot(). Pirmā funkcija ir paredzēta ātrai attēla veidošanai, bet tai ir mazākas iespējas tikt modificētai, tāpēc šīs grāmatas ietvaros tā netiks izmantota. Šajā grāmatā visi piemēri balstīsies uz funkciju ggplot(). Šai funkcijai kā pirmais arguments ir jānorāda datu tabula/rāmis (var arī nenorādīt, bet tad tā jānorāda kā arguments geom_...() vai stat_...() funkcijās). Šis objektam būtu jābūt tādam, ko programma R uztver kā data frame. Nākamie argumenti ir x un y vērtības, kā arī citi mainīgie, ja no tiem ir jābūt atkarīgai krāsai, formai, utt. Visi mainīgie tiek norādīti funkcijā aes(). Ir jāatceras, ka aes() jānorāda tikai mainīgā (kolonnas) nosaukums, neliekot to pēdiņās, kā arī neizmantojot pieraktu dati$mainigais. Pieraksts ar $ zīmi var radīt dīvainu (nepareizu rezultātu). Funkcijā aes() nav obligāti rakstīt x=... un y=... - trūkstot šiem argumentiem, pirmais mainīgais tiks uztverts kā x, bet otrais kā y. "],
["dati.html", "2.1 Dati", " 2.1 Dati ggplot2 sistēmas iespēju apskatīšanai izmantoti R iekļautie datu objekti CO2 un mpg (iekļauts paketē ggplot2). CO2 ir eksperimenta rezultāti par sala tolerenaci sugai Echinochloa crus-galli. Datu objektā ir piecas kolonnas: (1) Plant - auga identifikators; (2) Type - auga izcelsmes vieta; (3) Treatment - eksperimenta apstākļi (divas kategorijas); (4) conc - vides CO2 koncentrācija; (5) uptake - uzņemtā CO2 apjoms. data(CO2) head(CO2) ## Plant Type Treatment conc uptake ## 1 Qn1 Quebec nonchilled 95 16.0 ## 2 Qn1 Quebec nonchilled 175 30.4 ## 3 Qn1 Quebec nonchilled 250 34.8 ## 4 Qn1 Quebec nonchilled 350 37.2 ## 5 Qn1 Quebec nonchilled 500 35.3 ## 6 Qn1 Quebec nonchilled 675 39.2 Objektā mpg ir informācija par degvielas patēriņu, kas pārādīta 11 kolonnās: (1) manufacter - ražotājs; (2) model - automašīnas modelis; (3) displ - dzinēja tilpums; (4) year - ražošanas gads; (5) cyl - cilindru skaits; (6) trans - transmisijas tips; (7) drv - velkošie riteņi; (8) cty - jūdžu skaits/gallons pilsētā; (9) hwy - ūdžu skaits/gallons uz šosejas; (10) fl - degvielas veids; (11) class - automašīnas veids. library(ggplot2) data(mpg) head(mpg) ## # A tibble: 6 × 11 ## manufacturer model displ year cyl trans drv cty hwy fl ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; ## 1 audi a4 1.8 1999 4 auto(l5) f 18 29 p ## 2 audi a4 1.8 1999 4 manual(m5) f 21 29 p ## 3 audi a4 2.0 2008 4 manual(m6) f 20 31 p ## 4 audi a4 2.0 2008 4 auto(av) f 21 30 p ## 5 audi a4 2.8 1999 6 auto(l5) f 16 26 p ## 6 audi a4 2.8 1999 6 manual(m5) f 18 26 p ## # ... with 1 more variables: class &lt;chr&gt; "],
["attelu-saglabasana.html", "2.2 Attēlu saglabāšana", " 2.2 Attēlu saglabāšana ggplot2 sistēmā izveidoto attēlu saglabāšanu var veikt ar funkciju ggsave(), kuru izpilda pēc attēlā izveidošanas un kurā kā pamatarguments ir jānorāda vēlamais attēlā nosaukums ar nepieciešamo paplašinājumu (png, eps, ps, tex, pdf, jpeg, tiff, bmp, svg, wmf (tikai uz windows)). Papildus var norādīt attēla izmēru (width= un height=). Pēc noklusējuma izmērs ir collās, bet var mainīt uz cm vai mm ar argumentu units=. Arguments dpi= rastra tipa attēliem maina izšķirtspēju. library(ggplot2) data(CO2) ggplot(CO2,aes(conc,uptake)) + geom_point() ggsave(&quot;Attels_1.png&quot;,width = 10,height = 6, units=&quot;cm&quot;) -->"],
["formas.html", "Nodaļa 3 Formas", " Nodaļa 3 Formas ggplot2 sistēmā ir iespējams vienus un tos pašus datus attēlot dažādos veidos, izvēloties atbilstošo datu attēlošanas formu jeb geom_...(). Vairumā gadījumu ir jānorāda x un y vērtības, bet atsevišķos gadījumos ir nepieciešami arī papildus mainīgie, vai arī nepieciešamas tikai x vērtības (piemēram, histogrammai). "],
["geom-point.html", "3.1 geom_point()", " 3.1 geom_point() Ar geom_point() ir iespējams veidot izkliedes attēlus (scatterplot) (3.1 attēls). library(ggplot2) ggplot(CO2,aes(conc,uptake)) + geom_point() Attēls 3.1: Izkliedes attēla piemērs Punktiem ir iespējams mainīt krāsu (color=), formu (shape=), lielumu (size=) un caurspīdīgumu (alpha=). Mainot šos parametrus ir jānolemj pēc kādiem principiem tas notiks - parametrs būs vienāds visiem punktiem, vai arī tas mainīsies atkarībā no kāda cita mainīgā datos. Ja parametram ir jābūt vienādam visiem punktiem, tad tas ir jānorāda ārpus funkcijas aes() pašā geom_...() vai ggplot() funkcijā. Toties, ja parametram ir jāmainās atkarībā no mainīgā, tad tas obligāti jāliek funkcijā aes(). Šajā piemērā punktu krāsa un lielums ir mainīts visiem punktiem uzreiz (3.2 attēls). Krāsu var norādīt kā tās anglisko nosaukumu (tos var apskatīt ar funkciju colors()) vai arī izmantojot heksadecimālo kodu. ggplot(CO2,aes(conc,uptake)) + geom_point(color=&quot;green&quot;,size=2) Attēls 3.2: Izkliedes attēls, kurā krāsa un lielums visiem punktiem vienāds Ja arguments color= atrodas aes() iekavās un tas ir atkarīgs no kāda mainīgā, tad punktu krāsa mainīsies atbilstoši vērtībām, kā arī parādīsies atbilstošā leģenda. Krāsu maiņa un leģendas veids ir atkarīgs no tā, kāda veida mainīgais ir izmantots. Ja krāsa ir atkarīga no kategorijas mainīgā, tad krāsas mainīsies diskrēti (3.3 attēls). ggplot(CO2,aes(conc,uptake,color=Type)) + geom_point() Attēls 3.3: Izkliedes attēls, kurā krāsa ir atkarīga no kategorijas mainīgā Toties norādāt kā mainīgo tādu, kas ir skaitlisks, krāsa mainīsies kā gradients (3.4 attēls). ggplot(CO2,aes(conc,uptake,color=uptake)) + geom_point() Attēls 3.4: Izkliedes attēls, kurā krāsa ir atkarīga no skaitliska mainīgā Punktu forma var mainīties tikai atkarībā no kategorijas mainīgā (3.5 attēls). ggplot(CO2,aes(conc,uptake,shape=Type)) + geom_point() Attēls 3.5: Izkliedes attēls, kurā forma ir atkarīga no kategorijas mainīgā Ir iespējams panākt arī, ka, piemēram, punktu forma mainās atkarībā no viena mainīgā, bet krāsa atkarībā no cita mainīgā. Šajā gadījumā parādīsies arī divas leģendas (3.6 attēls). ggplot(CO2,aes(conc,uptake,shape=Type,color=Treatment)) + geom_point() Attēls 3.6: Izkliedes attēls, kurā forma un krāsa ir atkarīga no dažādiem kategorijas mainīgajiem "],
["geom-bar.html", "3.2 geom_bar()", " 3.2 geom_bar() Stabiņu attēlus veido ar funkciju geom_bar(). Šai funkcijai aes() ir jānorāda tikai x vērtības (diskrētas), jo novērojumu skaits katrā klasē tiek saskaitīts automātiski (geom_bar() balstās un stat_count()) (3.7 attēls). ggplot(mpg,aes(drv)) + geom_bar() Attēls 3.7: Stabiņu attēla piemērs Stabiņu attēlā katram stabiņa ir iespējams mainīt krāsu (color=) un aizpildījumu (fill=). Arguments color= nosaka līnijas krāsu apkārt katram no stabiņiem, bet fill= nosaka paša stabiņa krāsu (aizpildījumu) (3.8 attēls). ggplot(mpg,aes(drv)) + geom_bar(fill=&quot;white&quot;,color=&quot;red&quot;) Attēls 3.8: Stabiņu attēls, kurā stabiņu krāsa un aizpildījums visiem vienāds Padarot aizpildījumu atkarīgu no kāda kategrijas mainīgā, izveidojas stabiņu attēls, kur pie katras x mainīgā kategorijas, stabiņš ir sadalītas pa daļām balstoties uz jauno mainīgo (3.9 attēls). ggplot(mpg,aes(drv,fill=factor(cyl))) + geom_bar() Attēls 3.9: Stabiņu attēls, kurā stabiņu aizpildījums atkarīgs no mainīgā Pieliekot argumentu position=&quot;dodge&quot;, var panākt, ka pie katras x kategorijas stabiņi ir viens otram blakus, nevis viens virs otra (3.10 attēls). ggplot(mpg,aes(drv,fill=factor(cyl))) + geom_bar(position=&quot;dodge&quot;) Attēls 3.10: Stabiņu attēls, kurā stabiņu aizpildījums atkarīgs no mainīgā "],
["geom-col.html", "3.3 geom_col()", " 3.3 geom_col() Gadījumos, kad dati ir jau apkopoti un ir nepieciešams izveidot stabiņu attēlu, tad labāk izmantot geom_col(), kam jānorāda gan x vērtības, gan arī atbilstošās y vērtības (skaiti) (3.11 attēls). dati &lt;- data.frame(Dzimums=c(&quot;S&quot;,&quot;V&quot;),Skaits=c(23,45)) dati ## Dzimums Skaits ## 1 S 23 ## 2 V 45 ggplot(dati,aes(Dzimums,Skaits)) + geom_col() Attēls 3.11: Stabiņu attēls, kurā skaiti jau doti tabulā "],
["geom-line.html", "3.4 geom_line()", " 3.4 geom_line() Datu punktu savienošanai ar līniju var izmantot geom_line(), kas savieno punktus no mazākās x vērtības līdz lielākajai x vērtībai (3.12 attēls). ggplot(mpg,aes(cty,hwy)) + geom_line() Attēls 3.12: Līniju diagrammas piemērs Līnijām ir iespējams mainīt tās platumu (size=), krāsu (color=) un līnijas veidu (linetype=) (3.13 attēls). ggplot(mpg,aes(cty,hwy)) + geom_line(color=&quot;red&quot;,size=1.5,linetype=2) Attēls 3.13: Līnija ar izmainītiem parametriem Ja kāds no līnijas parametriem ir atkarīgs no diskrēta trešā mainīgā, tad parādīsies tik daudz līnijas, cik mainīgajam ir līmeņi (3.14 attēls). ggplot(mpg,aes(cty,hwy,color=drv)) + geom_line() Attēls 3.14: Līnija, kuras krāsa atkarīga no mainīgā "],
["geom-path.html", "3.5 geom_path()", " 3.5 geom_path() Līniju diagrammai līdzīgs ir arī geom_path(), bet šajā gadījumā punkti tiek savienoti tādā secībā, kādā tie parādās datu tabulā (3.15 attēls). geom_path() ir īpaši noderīgs gadījumos, ja jāsavieno x un y koordinātes pārvietošanās ceļam. ggplot(mpg,aes(cty,hwy)) + geom_path() Attēls 3.15: Punkti, kas savienoti ar līniju to izvietojuma secībā "],
["geom-boxplot.html", "3.6 geom_boxplot()", " 3.6 geom_boxplot() Vērtībamplitūdas diagrammas veidošanai izmanto geom_boxplot(). Šim attēla veida x vērtībām ir jābūt kvalitatīviem datiem, vai arī skaitliskiem datiem, kas pārvērsti par faktoru. y vērtībām obligāti ir jābūt skaitliskām (3.16 attēls). ggplot(CO2,aes(Type,uptake)) + geom_boxplot() Attēls 3.16: Vērtībamplitūdas diagrammas piemērs Līdzīgi kā stabiņu attēlam vērtībamplitūdas diagrammā var mainīt līniju un punktu krāsu (color=) vai arī “kastītes” aizpildījumu (fill=) (3.17 attēls). ggplot(CO2,aes(Type,uptake)) + geom_boxplot(color=&quot;green&quot;,fill=&quot;red&quot;) Attēls 3.17: Vērtībamplitūdas diagramma ar izmainītu līniju un kastītes krāsu Izlēcēju (neraksturīgo vērtību) punktu krāsu, formu un izmēru var mainīt arī atsevišķi, izmantojot argumentus outlier.color=, outlier.shape= un outlier.size= (3.18 attēls). ggplot(CO2,aes(Type,uptake)) + geom_boxplot(outlier.color = &quot;red&quot;,outlier.shape = 13,outlier.size = 3) Attēls 3.18: Vērtībamplitūdas diagramma ar izmainītu izlēcēju krāsu, formu un izmēru Ja arguments fill= atrodas funkcijas aes() iekavās un tas ir atkarīgs no kāda mainīgā, tad pie katras atbilstošās x vērtības, vērtībamplitūdas diagramma tiek sadalīta tik daļās, cik līmeņi ir papildus mainīgajam, kā arī parādās atbilstošā leģenda ar izmantotajām aizpildījuma krāsām (3.19 attēls). ggplot(CO2,aes(Type,uptake,fill=Treatment)) + geom_boxplot() Attēls 3.19: Vērtībamplitūdas diagramma, kurā katram faktora līmenim diagramma sadalīta daļās "],
["geom-count.html", "3.7 geom_count()", " 3.7 geom_count() Gadījumos, kad nepieciešams attēlot izkliedes diagrammu, bet ir vērojama punktu pārklāšanās (pie vienādām x un y vērtībām ir vairāki novērojumi), var izmantot geom_count(), kas parāda cik daudz novērojumu ir konkrētajām x un y vērtībām (3.20 attēls). ggplot(mpg, aes(cty, hwy)) + geom_count() Attēls 3.20: Izkliedes diagramma, kur punktu lielums atkarīgs no novērojumu skaita Ja aes() funkcijā norāda argumentu size=..prop.., tad punktu lielums ir parāda proporciju nevis skaitu (3.21 attēls). ggplot(mpg, aes(cty, hwy)) + geom_count(aes(size=..prop..)) Attēls 3.21: Izkliedes diagramma, kur punktu lielums atbilst novērojumu proporcijai "],
["geom-histogram.html", "3.8 geom_histogram()", " 3.8 geom_histogram() Histogrammas veidošanai izmanto geom_histogram(), kam ir nepieciešamas tikai x vērtības. Pēc noklusējuma dati tiek dalīti trīs klasēs (3.22 attēls). ggplot(CO2,aes(uptake)) + geom_histogram() ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. Attēls 3.22: Histogrammas piemērs Ar argumentu binwidth= ir iespējams mainīt dalījuma klases lielumu, tādēji mainot klašu skaitu un histogrammas izskatu (3.23 attēls). Var arī norādīt vēlamo klašu skaitu ar argumenti bins=. ggplot(CO2,aes(uptake)) + geom_histogram(binwidth = 10) Attēls 3.23: Histogrammas ar mainītu klases lielumu Tā kā histogrammā parādās stabiņi, tad tiem ir iespējams mainīt gan līnijas krāsu (color=), gan arī aizpildījumu (fill=) (3.24 attēls). ggplot(CO2,aes(uptake)) + geom_histogram(color=&quot;green&quot;,fill=&quot;white&quot;) ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. Attēls 3.24: Histogrammas ar mainītu izskatu Norādot, ka aizpildījums ir atkarīgs no mainīgā, izveidosies histogramma, kurā katrs stabiņš sadalīts daļās atbilstoši novērojumu skaitam katrā no līmeņiem (3.25 attēls). ggplot(CO2,aes(uptake,fill=Type)) + geom_histogram(binwidth = 5) Attēls 3.25: Histogrammas, kur aizpildījums atkarīgs no mainīgā "],
["geom-abline-geom-hline-un-geom-vline.html", "3.9 geom_abline(), geom_hline() un geom_vline()", " 3.9 geom_abline(), geom_hline() un geom_vline() Ja attēlam ir nepieciešams pievienot diagonālu, horizontālu vai vertikālu līniju, tad jāizmanto attiecīgi geom_abline(), geom_hline() vai geom_vline(). Diagonālas līnijas pievienošanai jānorāda divas vērtības: slope= (norāda slīpumu) un intercept= (norāda, kur krusto y asi, ja x=0) (3.26 attēls). ggplot(CO2,aes(conc,uptake)) + geom_point() + geom_abline(intercept = 5, slope = 0.04) Attēls 3.26: Izkliedes diagramma ar pievienotu diagonālu līniju Horizontālas līnijas pievienošanai izmanto geom_hline(), kurai kā arguments jānorāda yintercept = (kādai y vērtībai atbilst līnija) (3.27 attēls). ggplot(CO2,aes(conc,uptake)) + geom_point() + geom_hline(yintercept = 20) Attēls 3.27: Izkliedes diagramma ar pievienotu horizontālu līniju Pie argumentu yintercept = var norādīt arī uzreiz vairākas vērtības, kā redzultātā parādīsies vairākas līnijas (3.28 attēls). ggplot(CO2,aes(conc,uptake)) + geom_point() + geom_hline(yintercept = c(20,30,40)) Attēls 3.28: Izkliedes diagramma ar pievienotām vairākām horizontālām līnijām Līnijas novietojums var būt atkarīgs no kāda mainīgā datos, tikai šajā gadījumā argumentam yintercept = jāatrodas funkcijā aes() (3.29 attēls). dati.papildus &lt;- data.frame(limeni=c(10,20,30,40)) ggplot(CO2,aes(conc,uptake)) + geom_point() + geom_hline(data=dati.papildus,aes(yintercept = limeni)) Attēls 3.29: Izkliedes diagramma ar pievienotu horizontālu līniju Vertikālas līnijas pievieno ar funkciju geom_vline() un argumentu xintercept = (kādai x vērtībai atbilst līnija) (3.30 attēls). Pārējie darbības principi ir līdzīgi geom_hline(). ggplot(CO2,aes(conc,uptake)) + geom_point() + geom_vline(xintercept = 500) Attēls 3.30: Izkliedes diagramma ar pievienotu vertikālu līniju "],
["geom-jitter.html", "3.10 geom_jitter()", " 3.10 geom_jitter() Gadījumos, kad nepieciešams izveidot izkliedes (punktu) diagrammu, bet vērojam vērtību pārklāšanās (daudz identisku vērtību), var izmantot geom_jitter(), kur punktiem tiek veikta neliela nobīde x vai y (vai abu) ass virzienā, lai novērstu pārklāšanos. Šādu attēlošanas veidu sevišķi ērti izmantot, ja x vērtības ir kategorijas mainīgais, jo tad izkliede notiek tikai x ass virzienā, bet y ass virzienā redzamas reālās vērtības (3.31 attēls). ggplot(CO2,aes(Type,uptake)) + geom_jitter() Attēls 3.31: Izkliedes diagramma, kurā x virzienā nejauši mainīts punktu izvietojums geom_jitter() ir labi izmantot kombinācijā ar geom_boxplot(), jo tādējādi gan parādās reālās vērtības, gan arī vērtību apkopojums (3.32 attēls). ggplot(CO2,aes(Type,uptake)) + geom_boxplot() + geom_jitter() Attēls 3.32: Izkliedes diagrammas un vērtībamplitūdas diagrammas kombinācija geom_jitter() un geom_boxplot() var kombinēt arī gadījumos, kad vērtībamplitūdas diagramma ir sadalīta atbilsotīs trešā mainīgā līmeņiem, bet šajā gadījumā papildus ir jānorāda arguments position=position_jitterdodge(), lai punktu izvietojums atbilstu reālajam vērtību sadalījumam pa līmeņiem (3.33 attēls). ggplot(CO2,aes(Type,uptake,fill=Treatment)) + geom_boxplot() + geom_jitter(position=position_jitterdodge()) Attēls 3.33: Izkliedes diagrammas un vērtībamplitūdas diagrammas kombinācija gadījumā, kad iesaistīts trešais mainīgais dalījuma līmeņiem "],
["geom-smooth.html", "3.11 geom_smooth()", " 3.11 geom_smooth() Ja ir vēlme attēlam pievienot trenda līniju, tad jāizmanto geom_smooth(). Pēc noklusējuma izveidojas izlīdzīnātā trenda līnija un tās ticamības intervāls ar metodi loess (3.34 attēls). ggplot(CO2,aes(conc,uptake)) + geom_point() + geom_smooth() ## `geom_smooth()` using method = &#39;loess&#39; Attēls 3.34: Izkliedes diagrammas ar pievienotu trenda līniju Lineārās trenda līnijas pievienošanai, jānorāda arguments method=&quot;lm&quot; (3.35 attēls). ggplot(CO2,aes(conc,uptake)) + geom_point() + geom_smooth(method=&quot;lm&quot;) Attēls 3.35: Izkliedes diagrammas ar pievienotu lineāro trenda līniju Ar argumentu se=FALSE var noņemt ticamības intervālu (3.36 attēls). ggplot(CO2,aes(conc,uptake)) + geom_point() + geom_smooth(method=&quot;lm&quot;, se=FALSE) Attēls 3.36: Izkliedes diagrammas ar pievienotu lineāro trenda līniju, toties bez ticamības intervāla Trenda līnijas krāsu maina ar argumentu color=, bet ticamības intervāla aizpildījumu ar argumentu fill=. Ja vienu vai abus no šiem argumentiem norāda aes() iekavās un tas ir atkarīgs no kāda mainīgā, tad trenda līnijas tiek izveidotas katram līmenim (3.37 attēls). ggplot(CO2,aes(conc,uptake)) + geom_point() + geom_smooth(method=&quot;lm&quot;,aes(color=Type,fill=Type)) Attēls 3.37: Izkliedes diagrammas ar pievienotu lineāro trenda līniju dažādiem līmeņiem Trenda līniju var veidot ne tikai izmantojot esošo formulu y ~ x, bet arī izmantojot kādu citu saistību starp abiem mainīgajiem. Šajā gadījumā jāizmanto arguments formula = un jālieto apzīmējumi x un y, nevis oriģinālie mainīgo nosaukumi (3.38 attēls). ggplot(CO2,aes(conc,uptake)) + geom_point() + geom_smooth(method=&quot;lm&quot;,formula = y ~ x + I(x^2)) Attēls 3.38: Izkliedes diagrammas ar pievienotu īpašu trenda līniju "],
["geom-violin.html", "3.12 geom_violin()", " 3.12 geom_violin() Īpašs datu attēlošanas veids ir geom_violin(), kas sevī apvieno gan vērtībaplitūdas īpašības, gan arī blīvuma attēla īpašības. Pēc būtības tas ir blīvuma attēls, kurā vērtību blīvuma funkcijas attēlojums dots spoguļattēlā (3.39 attēls). ggplot(CO2,aes(Type,uptake)) + geom_violin() Attēls 3.39: geom_violin() attēls Ar argumentu draw_quantiles = attēlu var papildināt ar kvartiļu pozīcijām (3.40 attēls). ggplot(CO2,aes(Type,uptake)) + geom_violin(draw_quantiles = c(0.25, 0.5, 0.75)) Attēls 3.40: geom_violin() attēls ar pievienotām kvartilēm Pievienojot argumenu fill = funkcijā aes(), attēls tiek sadalīts katram no faktora līmeņiem (3.41 attēls). ggplot(CO2,aes(Type,uptake)) + geom_violin(aes(fill=Treatment)) Attēls 3.41: geom_violin() attēls sadalīts pa līmeņiem -->"],
["skalas.html", "Nodaļa 4 Skalas", " Nodaļa 4 Skalas Uz x un y ass esošo vērtību, kā arī punktu, līniju, stabiņu krāsu, formu, izmēru utt. vērtību mainīšanai ir jāizmanto speciālas skalu maiņas funkcijus, kuru nosaukumi sastāv no trīs vārdiem. Visām funkcijām pirmais vārds ir scale, otrais vārds parāda, kāda veida skala tā ir - x, y vai attiecīgi krāsu (color), aizpildījuma (fill), līniju veida (linetype), simbolu veida (shape), izmēra (size) vai caurspīdīguma (alpha). Funkcijas nosaukumā trešais vārds norāda kāda veida vērtības ir izmantotas skalas izveidē - nepārtrauktas (continuous) vai diskrētas (discrete), kā arī ir citi papildus veidi, piemēram, manual (vērtības nosaka manuāli), gradient (attiecas uz krāsām un aizpildījumiem). "],
["scale-x-continuous-un-scale-y-continuous.html", "4.1 scale_x_continuous() un scale_y_continuous()", " 4.1 scale_x_continuous() un scale_y_continuous() x un y ass vērtību maiņai, ja tās skaitliskas (nepārtrauktas), izmanto attiecīgi funkcijas scale_x_continuous() un scale_y_continuous(). Izmantojot šīs funkcijas var mainīt asu parakstus (arguments name=), pozīcijas, kurās parādās skaitļi (breaks=) (4.1 attēls). ggplot(CO2,aes(conc,uptake)) + geom_point() + scale_x_continuous(&quot;Koncentrācija&quot;,breaks=c(200,400,500)) + scale_y_continuous(&quot;Uzņemtais apjoms&quot;) Attēls 4.1: Nepārtraukto asu piemērs Ar argumentu limits= ir iespējams mainīt katras ass garumu, bet jāņem vērā, ka gadījumā, ja jaunais garums būs mazāks nekā vērtību amplitūda, tad vērtības ārpus ass garumu tiks izslēgtas no attēla (to parāda arī brīdinājums par izslēgtām vērtībām), ietekmējot attēlojumu (4.2 attēls). Tas īpaši attiecas uz stabiņu attēliem, vai attēliem ar trenda līniju. ggplot(CO2,aes(conc,uptake)) + geom_point() + scale_x_continuous(limits=c(200,600)) + scale_y_continuous(limits=c(0,50)) ## Warning: Removed 48 rows containing missing values (geom_point). Attēls 4.2: Izmainītas nepārtrauktās ass piemērs y un x asi ir iespējams arī pārvietot attiecīgi uz labo pusi vai uz augšu, norādot argumentu position= (4.3 attēls). ggplot(CO2,aes(conc,uptake)) + geom_point() + scale_y_continuous(position = &quot;right&quot;) + scale_x_continuous(position = &quot;top&quot;) Attēls 4.3: Pārvietotas x un y asis Ar argumentu sec.axis= gan x, gan y asij ir iespējams izveidot otro asi, bet tikai ar nosacījumu, ka otrā ass ir tieša pamatass transformāciju (4.4 attēls). Tas nozīmē, ka nevar izveidot otru asi, kas parāda pavisam citas vērtības. ggplot(CO2,aes(conc,uptake)) + geom_point() + scale_y_continuous(sec.axis = sec_axis(~./100,name=&quot;Otrā y ass&quot;)) Attēls 4.4: Attēls ar otru y asi, kas ir pirmās transformācija "],
["scale-x-discrete-un-scale-y-discrete.html", "4.2 scale_x_discrete() un scale_y_discrete()", " 4.2 scale_x_discrete() un scale_y_discrete() Gadījumos, kad uz x vai y ass attēlotas kategorijas mainīgā vērtības, ir jāizmanto attiecīgi funkcijas scale_x_discrete() un scale_y_discrete(), lai mainītu šo asu izskatu. Ar argumentu limits= ir iespējams norādīt, kuras tieši vērtības attēlot uz ass (atmest kādu no līmeņiem) (4.5 attēls). ggplot(mpg,aes(drv,hwy)) + geom_boxplot() + scale_x_discrete(limits = c(&quot;f&quot;,&quot;r&quot;)) ## Warning: Removed 103 rows containing non-finite values (stat_boxplot). Attēls 4.5: Attēls ar kategorijas x asi, kur attēloti tikai daži līmeņi Arguments limits= ļauj arī mainīt secību, kādā parādās līmeņi pie atbilstošās ass (4.6 attēls). ggplot(mpg,aes(drv,hwy)) + geom_boxplot() + scale_x_discrete(limits = c(&quot;r&quot;,&quot;4&quot;,&quot;f&quot;)) Attēls 4.6: Attēls ar kategorijas x asi, kur mainīta līmeņu secība Līmeņu nosaukumu maiņai izmanto argumentu labels=, kur jānorāda jaunie līmeņu nosaukumi tādā secībā, kā tie parādās pie atbilstošās ass, vai arī jānorāda vecais un jaunais nosaukums un tad secībai nav nozīmēs (4.7 attēls). Jāņem vērā, ka arguments labels= nemaina līmeņu attēlojuma secību, pat ja mainīta kārtība to nosaukumiem. ggplot(mpg,aes(drv,hwy)) + geom_boxplot() + scale_x_discrete(labels = c(&quot;4&quot;=&quot;Četri&quot;,&quot;r&quot;=&quot;Pakaļējie&quot;,&quot;f&quot;=&quot;Priekšējie&quot;)) Attēls 4.7: Attēls ar kategorijas x asi, kur mainīti līmeņu nosaukumi "],
["scale-colour-un-scale-fill.html", "4.3 scale_colour_…() un scale_fill…()", " 4.3 scale_colour_…() un scale_fill…() Gadījumos, kad formu (punktu, līniju) krāsa ir atkarīga no kāda mainīgā ar argumentu colour =, šo krāsu un izveidoto leģendu mainīšanai ir jāizmanto funkcijas no grupas scale_colour...(). Analoģiski, ja aizpildījuma krāsa ir noteikta ar argumentu fill =, tad jāizmanto funkcijas no grupas scale_fill..() Krāsu (aizpildījuma) skalas veids ir atkarīgs no mainīgā veida, kas izmantots nosakot krāsu. Ja tas ir diskrēts (kategorijas), tad jāizmanto funkcija scale_colour_discrete() vai scale_fill_discrete(), kurā kā citās kategorijas skalās var norādīt nosaukumu, kas parādīsies leģendā (name =), kādā veidā nosaukt līmeņus leģendā (labels =) un kurus līmeņus parādīt attēlā (limits =) (4.8 attēls). ggplot(mpg, aes(cty, hwy, colour = drv)) + geom_point() + scale_colour_discrete(name = &quot;Piedziņas veids&quot;, labels = c(&quot;Visi&quot;,&quot;Priekšējie&quot;,&quot;Pakaļējie&quot;)) Attēls 4.8: Izkliedes attēls ar mainītu leģendas izskatu Pašu krāsu (aizpildījumu) mainīšanai var izmantot vairākas pieejas, piemēram, izmantot funkciju scale_colour_hue() vai scale_fill_hue() un mainīt trīs parametru vērtības: l =, h = un c =, kas attiecīgi apzīmē luminance, hues un chroma (4.9 attēls). ggplot(mpg, aes(cty, hwy, colour = drv)) + geom_point() + scale_colour_hue(h=c(60,190)) Attēls 4.9: Izkliedes attēls, kurā mainītas krāsu gamma Gatavu krāsu palešu izmantošanai, jāizmanto funkcija scale_colour_brewer() vai scale_fill_brewer(), norādot vēlamo krāsu paleti (palette =) (4.10 attēls). ggplot(mpg, aes(cty, hwy, colour = drv)) + geom_point() + scale_colour_brewer(palette = &quot;Set2&quot;) Attēls 4.10: Izkliedes attēls ar noteiktu krāsu paleti Pilnīgai kontrolei pār attēla krāsām jāizmanto scale_colour_manual() vai scale_fill_manual(), kas ļauj izmantot paša izvēlētas krāsas (arguments values =), rakstot to angliskos nosaukumus vai izmantojot Hex kodus. Krāsu skaitam ir jābūt identiskam, līmeņu skaitam datos (4.11 attēls). ggplot(mpg, aes(drv, fill = drv)) + geom_bar() + scale_fill_manual(values = c(&quot;orange&quot;,&quot;black&quot;,&quot;deepskyblue&quot;)) Attēls 4.11: Stabiņu attēls ar manuāli noteiktām aizpildījuma krāsām Ja krāsa vai aizpildījums ir atkarīgs no skaitliska mainīgā, tad to mainīšanai var izmantot, piemēram, funkcijas scale_colour_gradient(), scale_colour_gradient2() un scale_colour_gradientn(), vai to analogus scale_fill_gradient(), scale_fill_gradient2() un scale_fill_gradientn(). Šīs funkcijas attiecīgi noteiks krāsu kā pāreju no zemākā uz augstāko toni, kā pāreju starp divām atšķirīgām krāsām, vai arī kā gradientu no vairāk kā divām krāsām (4.12 attēls). ggplot(CO2, aes(conc, uptake, colour = uptake)) + geom_point() + scale_colour_gradient(low=&quot;white&quot;,high = &quot;black&quot;) Attēls 4.12: Izkliedes attēls, kurā krāsa mainās kā gradients Norādot divas ļoti atšķirīgas krāsas, veidosies pārēja no vienas krāsas uz otru krāsu ar balto pa vidu. Pēc noklusējuma baltā krāsa atbildīs vērtībām 0, bet, ja nepieciešams cits viduspunkts, tas jānorāda ar argumentu midpoint = (4.13 attēls). ggplot(CO2, aes(conc, uptake, colour = uptake)) + geom_point() + scale_colour_gradient2(low=&quot;red&quot;,high = &quot;blue&quot;, midpoint = 30) Attēls 4.13: Izkliedes attēls, kurā krāsa mainās kā gradients no sarkanās uz zilo "],
["scale-alpha-.html", "4.4 scale_alpha_…()", " 4.4 scale_alpha_…() Ja veidojot attēlu funkcijā aes() ir izmantots arguments alpha =, tad caurspīdīguma vērtību un atbilstošo leģendu mainīšanai izmanto funkcijas scale_alpha_continuous(), scale_alpha_discrete() un scale_alpha_manual(). Visās funkcijās var norādīt leģendas nosaukumu (name =) un līmeņu nosaukumus (labels =). Papildus var norādīt arī argumentu range =, kas nosaka mazāko un lielāko vērtību caurspīdīguma skalai (4.14 attēls). ggplot(CO2, aes(conc, uptake, alpha = uptake)) + geom_point() + scale_alpha_continuous(&quot;Caurspīdīgums&quot;, breaks = c(8,16,24,32), range = c(0.3,0.8)) Attēls 4.14: Izkliedes attēls, kurā krāsa mainās kā gradients no sarkanās uz zilo "],
["scale-linetype-.html", "4.5 scale_linetype_…()", " 4.5 scale_linetype_…() Attēlā izmantoto līniju veida ietekmēšanai izmanto funkcijas scale_linetype_discrete() un scale_linetype_manual(). Ar pirmo funkciju var ietekmēt tikai leģendu un līmeņu nosaukumus, bet manuālā skala ļauj jau definēt konkrētos līniju veidus katram no līmeņiem, tos norādot kā skaitļus no 1 līdz 6, vai to angliskos nosaukumus (4.15 attēls). ggplot(mpg, aes(cty, hwy, linetype = drv)) + geom_line() + scale_linetype_manual(&quot;Līnijas veids&quot;, values= c(3,2,6)) Attēls 4.15: Līniju attēls ar mainītiem līniju veidiem "],
["scale-shape-.html", "4.6 scale_shape_…()", " 4.6 scale_shape_…() Izkliedes attēlos (punktu attēlos) simbolu maiņai izmanto funkcijas scale_shape_discrete() un scale_shape_manual(). Automātiski var tikt izveidots attēls ar sešiem dažādiem simbolu veidiem. Ja līmeņu daudzums ir lielāks par seši, tad tikai sešiem līmeņiem parādīsies simboli un brīdinājums, kā arī pārējie līmeņi attēlā neparādīsies. Šajā gadījumā obligāti jāizmanto funkcija scale_shape_manual() un jānodefinē savi simbola veidi. Ar scale_shape_discrete() var definēt leģendas nosaukumu un līmeņu nosaukumus (4.16 attēls). ggplot(CO2, aes(conc, uptake, shape = Type)) + geom_point() + scale_shape_discrete(&quot;Tips&quot;, labels = c(&quot;Pirmais&quot;,&quot;Otrais&quot;)) Attēls 4.16: Izkliedes attēls, kurā forma ir atkarīga no kategorijas mainīgā Funkcija scale_shape_manual() papildus nāk arguments values =, kas ļauj definēt izmantojamo simbola veidu (4.17 attēls). ggplot(CO2, aes(conc, uptake, shape = Type)) + geom_point() + scale_shape_manual(&quot;Tips&quot;, labels = c(&quot;Pirmais&quot;,&quot;Otrais&quot;), values = c(11,23)) Attēls 4.17: Izkliedes attēls ar mainītu simbolu veidu "],
["scale-size-.html", "4.7 scale_size_…()", " 4.7 scale_size_…() Gadījumos, kad kādai formai attēlā mainās lielums atbilstoši argumentam size =, ir jāizmanto kāda no scale_size...() funkcijām. Ar funkciju scale_size() var definēt ne tikai leģendas nosaukumu un dalījuma līmeņus, bet arī ar argumentu range = izmēru robežas kādās pārvērst vērtības (4.18 attēls). ggplot(CO2, aes(conc, uptake, size = uptake)) + geom_point() + scale_size(&quot;Izmēri&quot;,range = c(2,8)) Attēls 4.18: Izkliedes attēls, kurā mainās punktu izmērs Ja grib precīzi definēt izmērus tā, ka 0 vērtība atbilst punkta platībai (izmēram) 0, tad ir jāizmanto funkcija scale_size_area() (4.19 attēls). ggplot(CO2, aes(conc, uptake, size = uptake)) + geom_point() + scale_size_area() Attēls 4.19: Izkliedes attēls, kurā mainās punktu izmērs sākot ar 0 vērtību "],
["identitates-skalas.html", "4.8 Identitātes skalas", " 4.8 Identitātes skalas Ir vesela grupa skalu funkciju, kuru nosaukumā pēdējais vārds ir identity. Šīs skalas izmanto gadījumos, kad datos ir kolonna, kuras vērtības ir jāizmanto kā reālās attēlojāmā veida iespējamās vērtības, nevis sistēmai pašai jāizdomā attēlojums šim mainīgajam. Piemērs būtu, ka datos ir kolonna ar krāsu nosaukumiem, kurus tiešā veidā ir arī jāattēlo. Piemēram izveidota datu tabula, kurā ir kolonnas izmers un krasa (ar reāliem krāsu nosaukumiem). df &lt;- data.frame(x = 1:3, y = 1:3, izmers = 4:6, krasa = c(&quot;green&quot;,&quot;yellow&quot;,&quot;brown&quot;)) df ## x y izmers krasa ## 1 1 1 4 green ## 2 2 2 5 yellow ## 3 3 3 6 brown Izmantojot piemēra datus izkliedes attēlā un nosakot, ka punktu krāsa ir atkarīga no mainīgā krasa, redzams, ka izveidotajā attēlā un leģendā nosaukumi un krāsas nesakrīt (4.20 attēls), jo ggplot2 sistēma tos uztver kā vienkāršus nosaukumus, nevis reālus krāsu nosaukumus. ggplot(df, aes(x, y, colour = krasa)) + geom_point() Attēls 4.20: Izkliedes attēls ar mainītu krāsu Pievienojot funkciju scale_colour_identity() un scale_size_identity(), attēlā punktu izmērs un krāsa ir tāda, kāda tā norādīta datu tabulā, kā arī pēc noklusējuma nerādās leģenda (4.21 attēls). ggplot(df, aes(x, y, colour = krasa, size = izmers)) + geom_point() + scale_colour_identity() + scale_size_identity() Attēls 4.21: Izkliedes attēls ar mainītu krāsu -->"],
["koordinatu-sistemas.html", "Nodaļa 5 Koordinātu sistēmas", " Nodaļa 5 Koordinātu sistēmas Funkcijas koordinātu sistēmu noteikšanai izmanto, lai mainītu uz ass attēlojamo vērtību diapozonu, kā arī, lai mainītu vērtību attiecības starp x un y asīm. "],
["coord-cartesian.html", "5.1 coord_cartesian()", " 5.1 coord_cartesian() Pamatkoordinātu sistēma ir cartesian, kas tiek izmantota pēc noklusējuma. Ar funkciju coord_cartesian() var mainīt x un y ass diapozonu (to palielinot vai samazinot). Svarīgākais šajā procesā ir tas, ka mainās tikai attēlā redzamā datu daļa, bet netiek mainīts attēla veidošanai izmantotais datu apjoms (strādā līdzīgi kā “zoom”) (5.1 attēls). ggplot(CO2,aes(conc,uptake)) + geom_point() + geom_smooth(method=&quot;lm&quot;) + coord_cartesian(xlim=c(250,750),ylim=c(0,50)) Attēls 5.1: Izkliedes attēls ar mainītu asu diapozonu Norādītajiem asu limitiem automātiski tiek pievienota neliela papildus vieta. Ja ir nepieciešams, lai attēls būtu precīzi noteiktajā diapozonā, tad jāpievieno arguments expand = FALSE (5.2 attēls). ggplot(CO2,aes(conc,uptake)) + geom_point() + geom_smooth(method=&quot;lm&quot;) + coord_cartesian(xlim=c(250,750),ylim=c(0,50),expand = FALSE) Attēls 5.2: Izkliedes attēls ar precīzu mainītu asu diapozonu "],
["coord-fixed.html", "5.2 coord_fixed()", " 5.2 coord_fixed() Fiksēto koordinātu sistēmu izmanto tad, ja nepieciešams noteikta attiecība starp vienas vienības izmēru uz x ass un y ass. Pēc noklsējuma vērtība ratio = 1, kas nozīmē, ka viena vienība uz x ass ir tikpat gara kā uz y ass (5.3 attēls). ggplot(mpg,aes(cty,hwy)) + geom_point() + coord_fixed() Attēls 5.3: Izkliedes attēls ar fiksētām asīm Norādot pie argumenta ratio = skaitli, kas lielāks par 1, uz y ass vienībā būs tik reizas lielāka, nekā uz x ass; attiecīgi norādot skaitli, kas mazāks par 1, y ass viena vienība būs mazāka nekā uz x ass (5.4 attēls). ggplot(mpg,aes(cty,hwy)) + geom_point() + coord_fixed(ratio = 0.5) Attēls 5.4: Izkliedes attēls ar fiksētām asīm "],
["coord-flip.html", "5.3 coord_flip()", " 5.3 coord_flip() Lai samainītu vietām x un y asi, jāizmanto funkcija coord_flip() (5.5 attēls). ggplot(CO2,aes(Type,uptake)) + geom_boxplot() + coord_flip() Attēls 5.5: Vērtībamplitūdas diagramma ar mainītu asu novietojumu -->"],
["attelu-sadalisana.html", "Nodaļa 6 Attēlu sadalīšana", " Nodaļa 6 Attēlu sadalīšana Viena no ggplot2 sistēmas lielajām priekšrocībām ir tā, ka izmantojot tam speciāli paredzētas funkcijas (facet_wrap() un facet_grid()), ir iespējams sadalīt attēlu vairākās daļās balstoties uz vienu vai vairākiem mainīgiem, kur katrs mazais attēls ir daļa no kopējā datu attēlojuma. "],
["facet-grid.html", "6.1 facet_grid()", " 6.1 facet_grid() Izmantojot funkciju facet_grid(), var norādīt divus mainīgos pēc kuriem dalīt datus. Pirmais mainīgais (pirms tildes zīmes) norāda dalījumu rindās, bet otrais mainīgais aiz tildes zīmes norāda dalījumu kolonnās. Ja ir vēlme dalīt tikai vienā dimensijā, tad neizmantotās dimensijas (mainīgā) vietā jānorāda “.”. Pirmajā piemēra attēls sadalīts mazākos attēlos balstoties tikai uz mainīgo Type kolonnās (6.1 attēls). ggplot(CO2,aes(conc,uptake)) + geom_point() + facet_grid(.~Type) Attēls 6.1: Attēla sadalīšana kolonnās balstoties uz vienu mainīgo Norādot mainīgo Treatment pirms tildes zīmes, izveidojas attēls, kas sadalīts rindās atbilstoši šī mainīgā līmeņiem (6.2 attēls). ggplot(CO2,aes(conc,uptake)) + geom_point() + facet_grid(Treatment~.) Attēls 6.2: Attēla sadalīšana rindās balstoties uz vienu mainīgo Norādot abus divus mainīgos, izveidojas attēls, kurā mazie attēliņi ir atbilstošo mainīgo līmeņu kombinācijas (6.3 attēls). ggplot(CO2,aes(conc,uptake)) + geom_point() + facet_grid(Treatment~Type) Attēls 6.3: Attēla sadalīšana balstoties uz diviem mainīgiem Pievienojot argumentu margins = TRUE, var panākt, ka veidojas ne tikai atsevišķi mazie attēli, bet arī attēli, kuros mainīgo līmeņi skatīti kopā (6.4 attēls). ggplot(CO2,aes(conc,uptake)) + geom_point() + facet_grid(Treatment~Type,margins = TRUE) Attēls 6.4: Attēla sadalīšana balstoties uz diviem mainīgiem, parādot arī kopējos attēlus "],
["facet-wrap.html", "6.2 facet_wrap()", " 6.2 facet_wrap() `facet_wrap() gadījumā mazie attēliņi tiek novietoti viens aiz otra, ar iespēju norādīt cik rindās/kolonnās tos nepieciešams izvietot. Attēlu sadalīšanu var veikt, piemēram, ar vienu mainīgo (nav jāizmanto “.” pirms tildes) (6.5 attēls). ggplot(mpg,aes(cty,hwy)) + geom_point() + facet_wrap(~class,ncol=4) Attēls 6.5: Attēlā sadalīšana daļās ar facet_wrap() Dalīšanu daļās var veikt arī ar vairākiem mainīgajiem, norādot tos aiz tildes zīmes (6.6 attēls). ggplot(mpg,aes(cty,hwy)) + geom_point() + facet_wrap(~cyl + drv,ncol=4) Attēls 6.6: Attēlā sadalīšana daļās ar facet_wrap() un diviem mainīgiem Attēla sadalīšanai daļās var izmantot arī papildus funkcijas, piemēram, sadalot skaitlisku mainīgo daļās (6.7 attēls). ggplot(mpg,aes(cty,hwy)) + geom_point() + facet_wrap(~cut_number(displ,6)) Attēls 6.7: Attēlā sadalīšana daļās ar facet_wrap() un dalījums balstās uz skaitlisku mainīgo, kas sadalīts intervālos -->"],
["attela-noformesana.html", "Nodaļa 7 Attēla noformēšana", " Nodaļa 7 Attēla noformēšana ggplot2 sistēmā izveidoto attēlu izskata mainīšanai var izmantot iepriekš sagatavotas attēla noformēšanas tēmas, vai arī var mainīt katru elementu atsevišķi. Mainot noformējumu, mainās tikai tās attēla daļas, kas nav saistītas attēlojamiem datiem. "],
["definetas-attela-temas.html", "7.1 Definētās attēla tēmas", " 7.1 Definētās attēla tēmas Paketē ggplot2 ir definētas astoņas gatavas tēmas attēla izskata maiņai. Attēlā noformējums mainās, pieskaitot klāt atbilstošo tēmas funkciju. Katrā tēmā papildus ir iespējams mainīt pamatteksta izmēru (base_size=) un pamatfontu (base_family=). Gatovos tēmu noformējumus protams var papildināt arī ar citām izmaiņām konkrētiem elementiem. Attēlos 7.1, 7.2, 7.3, 7.4, 7.5, 7.6, 7.7, 7.8 un 7.9 parādīts kā izskatās sākotnējais attēls un kā tas mainās, izmantojot kādu no gatavajām tēmām. ggplot(CO2,aes(conc,uptake,color = Type)) + geom_point() Attēls 7.1: Attēls bez papildus noformējuma ggplot(CO2,aes(conc,uptake,color = Type)) + geom_point() + theme_bw() Attēls 7.2: Attēls ar theme_bw() ggplot(CO2,aes(conc,uptake,color = Type)) + geom_point() + theme_classic() Attēls 7.3: Attēls ar theme_classic() ggplot(CO2,aes(conc,uptake,color = Type)) + geom_point() + theme_dark() Attēls 7.4: Attēls ar theme_dark() ggplot(CO2,aes(conc,uptake,color = Type)) + geom_point() + theme_grey() Attēls 7.5: Attēls ar theme_grey() ggplot(CO2,aes(conc,uptake,color = Type)) + geom_point() + theme_light() Attēls 7.6: Attēls ar theme_light() ggplot(CO2,aes(conc,uptake,color = Type)) + geom_point() + theme_linedraw() Attēls 7.7: Attēls ar theme_linedraw() ggplot(CO2,aes(conc,uptake,color = Type)) + geom_point() + theme_minimal() Attēls 7.8: Attēls ar theme_minimal() ggplot(CO2,aes(conc,uptake,color = Type)) + geom_point() + theme_void() Attēls 7.9: Attēls ar theme_void() "],
["atsevisku-attela-elementu-mainisana.html", "7.2 Atsevišķu attēla elementu mainīšana", " 7.2 Atsevišķu attēla elementu mainīšana Papildus jau definētajām attēla noformējuma tēmām, ir iespējams mainīt gandrīz katru no attēla elementiem atsevišķi, izmantojot funkciju theme() un atbilstošo elementa nosaukumu. Pilnu sarakstu ar elementu nosaukumiem var iegūt apskatot funkcijas theme() palīdzības lapu. Elementu izskatu maiņa notiek pēc vienota principa - sākotnēji ir funkcija theme(), kurā kā arguments jānorāda maināmais elements, piemēram, axis.text.x = un tad nāk funkcija, kas norāda kāda izmaiņas veikt. Ir pieejamas trīs funkcijas element_text(), element_line() un element_rect(), kuras ir jāizraugas atbilstoši tam, kāda veida maināmais elements tas ir - teksts, līnija vai reģions (poligons). Katra elementa maiņa nav jāraksta savā theme() funkcijā, bet tie var būt vairāki argumenti vienā funkcijā. Teksta elementiem (element_text()) var mainīt teksta fontu grupu (family =), fonta veida (face =), krāsu (colour =), izmēru (size =), novietojumu horizentāli (hjust =) un vertikāli (vjust =), teksta leņķi (angle =), līnijas augstumu (lineheight =), atstarpes (margin =). Līniju elementiem (element_line()) var mainīt krāsu (colour =), līnijas biezumu (size =), līnijas veidu (linetype =), līnijas nobeigumu (lineend =) un pievienot bultu (arrow =). Reģiona jeb poligona elementiem (element_rect()) var mainīt aizpildījumu (fill =), krāsu līnijai apkārt reģionam (colour =), līnijas biezumu (size =) un līnijas veidu (linetype =). Ir pieejama arī speciāla funkcija element_blank(), kas no attēla noņems atbilstošo elementu, turklāt “pazudīs” arī šim elementam atvēlētā vieta, ja tas būs, piemēram, asu paraksts, vai asu apzīmējumi. 7.2.1 Attēla virsraksts Attēla virsraksta izskatu (bet ne tā saturu) maina ar argumentu plot.title =. Pirmajā piemēra teksta virsraksts pārveidots zaļā krāsā, 20 fonta izmērā un slīprakstā (7.10 attēls). ggplot(CO2,aes(conc,uptake,color = Type)) + geom_point() + labs(title = &quot;CO2 attēls&quot;)+ theme(plot.title = element_text(colour = &quot;green&quot;, size = 20, face = &quot;italic&quot;)) Attēls 7.10: Attēls ar mainītu virsraksta izskatu Jaunākajā ggplot2 verijā (2.2.0) virsraksts automātiski ir novietots attēla kreisajā pusē, to var izmainīt ar argumentu hjust = un vērtību 0.5 (0 - kreisā mala, 1 - labā mala, 0.5 - pa vidu) (7.11 attēls). ggplot(CO2,aes(conc,uptake,color = Type)) + geom_point() + labs(title = &quot;CO2 attēls&quot;)+ theme(plot.title = element_text(hjust = 0.5)) Attēls 7.11: Attēls ar mainītu virsraksta novietojumu Ja attēlam ir arī apakšvirsraksts, tad tā izskatu maina ar argumentu plot.subtitle = (7.12 attēls). ggplot(CO2,aes(conc,uptake,color = Type)) + geom_point() + labs(title = &quot;CO2 attēls&quot;, subtitle = &quot;Koncentrācijas ietekme&quot;)+ theme(plot.subtitle = element_text(face = &quot;bold&quot;, colour = &quot;blue&quot;)) Attēls 7.12: Attēls ar mainītu apakšvirsrakstu 7.2.2 Asu paraksti Asu parakstu maiņa notiek ar elementu axis.title = (abas asis vienlaicīgi), vai axis.title.x = un axis.title.y = mainot katras ass izskatu atsevišķi. Asu paraksti arī ir teksts, tāpēc izmantojama funkcija element_text() (7.13 attēls). ggplot(CO2,aes(conc,uptake,color = Type)) + geom_point() + theme(axis.title = element_text(size = 15, face = &quot;bold&quot;)) Attēls 7.13: Attēls ar vienādu asu parakstu noformējumu Izmantojot argumentus axis.title.x = un axis.title.y = var mainīt katru asi atsevišķi, piemēram, vienais asij noņemot parakstu, bet otrai to izmainot (7.14 attēls). ggplot(CO2,aes(conc,uptake,color = Type)) + geom_point() + theme(axis.title.x = element_blank(), axis.title.y = element_text(colour = &quot;red&quot;)) Attēls 7.14: Attēls ar x asi bez paraksta 7.2.3 Asu apzīmējumi Apzīmējumus pie asīm (skaitļus vai līmeņu nosaukumus) maina ar argumentiem axis.text =, axis.text.x =, vai axis.text.y = (7.15 attēls). ggplot(CO2,aes(conc,uptake,color = Type)) + geom_point() + theme(axis.text.x = element_text(angle = 45, hjust = 1), axis.text.y = element_text(angle = 90, hjust = 0.5)) Attēls 7.15: Attēls ar mainītiem asu apzīmējumiem 7.2.4 Asu līnijas Pēc noklusējuma vairākām tēmām nerādās asu līnijas. Tās var pievienot ar argumentu axis.line =, vai axis.line.x = un axis.line.y =. Tā kā tās ir līnijas, tad to izskata maiņai izmanto funkciju element_line() (7.16 attēls). ggplot(CO2,aes(conc,uptake,color = Type)) + geom_point() + theme(axis.line = element_line(linetype = &quot;longdash&quot;)) Attēls 7.16: Attēls ar asu līnijām Asu līniju galos ir iespējams arī pievienot bultiņu ar argumentu arrow = un funkciju arrow(), kurā norāda argumentu length = un bultiņas garumu un mērvienību (funkcijā unit()) (7.17 attēls). ggplot(CO2,aes(conc,uptake,color = Type)) + geom_point() + theme(axis.line = element_line(arrow = arrow(length = unit(2, &#39;mm&#39;)))) Attēls 7.17: Attēls ar bultiņām pie asīm 7.2.5 Leģendas novietojums Leģendas novietojuma nosaka ar argumentu legend.position = un iespējamāma vērtībām &quot;none&quot;, &quot;left&quot;, &quot;right&quot;, &quot;bottom&quot; un &quot;top&quot; (7.18 attēls). ggplot(CO2,aes(conc,uptake,color = Type)) + geom_point() + theme(legend.position = &quot;bottom&quot;) Attēls 7.18: Attēls ar leģendu apakšā Ja nepieciešams novietot leģendu attēla iekšienē, tad jānora reletīvās x un y koordinātes, kur c(0,0) atbilst attēla apakšējam kreisajam stūrim un c(1,1) attēla augšējam labajam stūrim (7.19 attēls). ggplot(CO2,aes(conc,uptake,color = Type)) + geom_point() + theme(legend.position = c(0.1,0.8)) Attēls 7.19: Attēls ar leģendu attēla iekšienē Leģendas novietojumā var mainīt arī leģendas ierakstu izvietojumu horizontāli vai vertikāli ar argumentu legend.direction = (7.20 attēls) ggplot(CO2,aes(conc,uptake,color = Type)) + geom_point() + theme(legend.position = &quot;bottom&quot;, legend.direction = &quot;vertical&quot;) Attēls 7.20: Attēls ar leģendu apakšā un leģendas ierakstiem izkārtotiem vertikāli Leģendas novietojumu var ietekmē arī mainot atstarpi starp leģendu un pamatattēlu ar argumentu legend.box.spacing = un funkciju unit(), kurā norāda vēlamo atstarpes izmēru un mērvienību (7.21 attēls). ggplot(CO2,aes(conc,uptake,color = Type)) + geom_point() + theme(legend.box.spacing = unit(1, &quot;cm&quot;)) Attēls 7.21: Attēls ar tālāk novietotu leģendu 7.2.6 Leģendas virsraksts Leģendas virsrakstam var mainīt izskatu (legend.title =) līdzīgi kā citiem teksta elementiem, kā arī mainīt leģendas virsraksta novietojumu (legend.title.align =) ar vērtībām no 0 (pa kreisi) līdz 1 (pa labi) (7.22 attēls). ggplot(CO2,aes(conc,uptake,color = Type)) + geom_point() + theme(legend.title = element_text(size = 15, color = &quot;darkgreen&quot;, face = &quot;bold.italic&quot;), legend.title.align = 1) Attēls 7.22: Attēls ar mainītu leģendas virsrakstu 7.2.7 Leģendas pamatne Kopējo leģendas pamatnes izskatu var mainīt ar argumenu legend.background = un funkciju element_rect() (7.23 attēls). ggplot(CO2,aes(conc,uptake,color = Type)) + geom_point() + theme(legend.background = element_rect(fill = &quot;grey73&quot;, colour = &quot;black&quot;)) Attēls 7.23: Attēls ar mainītu leģendas pamatni Ja attēlam ir divas vai vairākas leģendas, tad legend.background = maina katras atsevišķas leģendas pamatni, bet kopējo pamatni maina ar argumentu legend.box.background = (7.24 attēls). ggplot(CO2,aes(conc,uptake,color = Type, shape = Treatment)) + geom_point() + theme(legend.box.background = element_rect(fill = &quot;grey73&quot;, colour = &quot;black&quot;), legend.background = element_rect(fill = &quot;grey90&quot;)) Attēls 7.24: Attēls ar mainītu abu leģendu pamatni 7.2.8 Leģendas teksti Leģendas ierakstu tekstus maina ar argumentiem legend.text = (to izskats) un legend.text.align = (to novietojums pa kreisi (0) vai labi (1)) (7.25 attēls). ggplot(CO2,aes(conc,uptake,color = Type)) + geom_point() + theme(legend.text = element_text(size = 7, angle = 5), legend.text.align = 0.8) Attēls 7.25: Attēls ar mainītu leģendu tekstu 7.2.9 Leģendas ieraksti Pašu leģendas ierakstu, kuros parādas, piemēram, krāsu līmeņi vai simbolu veidi, mainīšanai ir pieejams parametrs legend.key =, kas maina ieraksta pamatnes izskatu (7.26 attēls). ggplot(CO2,aes(conc,uptake,color = Type)) + geom_point() + theme(legend.key = element_rect(fill = &quot;lightblue&quot;, color = &quot;blue&quot;)) Attēls 7.26: Attēls ar mainītu leģendu ieraksta pamatni Leģendas ierakstu pamatnes izmēru maiņai izmanto argumentu legend.key.size =, kas uzreiz maina vienādā apjomā gan platumu, gan augstumu, vai arī parametrus legend.key.height = un legend.key.width =, kas attiecīgi maina tikai augstumu, vai tikai platumu. Visiem šiem argumentiem ir jāizmanto funkcija unit(), lai noteiktu šo izmēru (7.27 attēls). ggplot(CO2,aes(conc,uptake,color = Type)) + geom_point() + theme(legend.key.height = unit(0.5, &quot;cm&quot;), legend.key.width = unit(1, &quot;cm&quot;)) Attēls 7.27: Attēls ar mainītu leģendu ierakstu izmēru 7.2.10 Attēla iekšējās daļas pamatne Attēla iekšējās daļas pamatnes izskata maina ar argumentu panel.background =. Ja šo argumentu lieto kopā ar funkciju element_blank(), tad tiek noņemta pamatnes krāsa (aizpildījums) (7.28 attēls). ggplot(CO2,aes(conc,uptake,color = Type)) + geom_point() + theme(panel.background = element_blank()) Attēls 7.28: Attēls ar noņemta iekšējās daļas pamatni Lai noņemtu tikai krāsu, arguments fill = jānorāda kā NA. Ja papildus norāda argumenu “colour =”, tad apkārt attēla iekšējai daļai parādās līnija (7.29 attēls). ggplot(CO2,aes(conc,uptake,color = Type)) + geom_point() + theme(panel.background = element_rect(fill = NA, color = &quot;black&quot;)) Attēls 7.29: Attēls ar līniju apkārt iekšējai daļai 7.2.11 Palīglīnijas (gridlines) Visu palīglīniju ietekmēšanai jāizmanto arguments panel.grid =, piemēram, tā vērtību norādot kā element_blank() tiks noņemtas visas palīglīnijas (7.30 attēls). ggplot(CO2,aes(conc,uptake,color = Type)) + geom_point() + theme(panel.grid = element_blank()) Attēls 7.30: Attēls bez palīglīnijām Ir iespējams arī ietekmēt atsevišķi visas galvenās palīglīnijas un mazās palīglīnijas, attiecīgi ar argumentiem panel.grid.major = un panel.grid.minor =. Var ietekmē arī atsevišķi šīs palīglīnijas attiecībā pret x un y ass ar argumentiem kā panel.grid.major.x = (7.31 attēls). ggplot(CO2,aes(conc,uptake, color = Type)) + geom_point() + theme(panel.grid.major.x = element_line(colour = &quot;lightblue&quot;), panel.grid.major.y = element_line(linetype = &quot;dashed&quot;, size = 2)) Attēls 7.31: Attēls ar izmainītām palīglīnijām 7.2.12 Attēla daļu virsraksti Tiem attēliem, kas ir sadalīti daļā izmantot facet_...() funkcijas, atsevišķu attēlu nosaukumu tekstu pamatnes maina ar elementu strip.background =, bet pašu tekstu izskatu ar strip.text = (visus kopā), vai arī ar argumentiem strip.text.x = (horizontālie nosaukumi) un strip.text.y = (vertikālie nosaukumi) (7.32 attēls). ggplot(CO2, aes(conc, uptake)) + geom_point() + facet_grid(Treatment ~ Type) + theme(strip.background = element_rect(colour = &quot;black&quot;, fill = NA), strip.text.x = element_text(face = &quot;italic&quot;), strip.text.y = element_text(face = &quot;bold&quot;)) Attēls 7.32: Sadalīts attēls ar mainītiem nosaukumu noformējumiem 7.2.13 Visa attēla pamatne Visa kopējā attēla pamatnes (fona) noteikšanai izmanto argumentu plot.background = (7.33 attēls). ggplot(CO2, aes(conc, uptake, color = Type)) + geom_point() + theme(plot.background = element_rect(fill = &quot;lightgreen&quot;)) Attēls 7.33: Attēls ar mainītu pamatnes krāsu Visam attēlam var mainīt arī malas izmērus, kas tas atrodas apkārt. To nosaka ar argumentu plot.margin = un funkcijā unit() norādot četrus skaitļus, kas atbilst attiecīgi augšejai, labajai, apakšējai un kreisajai malai (7.34 attēls). ggplot(CO2, aes(conc, uptake, color = Type)) + geom_point() + theme(plot.margin = unit(c(2,2,3,3), &quot;cm&quot;)) Attēls 7.34: Attēls ar mainītiem malas izmēriem -->"],
["literatura.html", "Literatūra", " Literatūra "]
]
